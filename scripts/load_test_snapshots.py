#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (snapshots) –≤ MinIO –∏ –ë–î

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/load_test_snapshots.py
    –∏–ª–∏ —á–µ—Ä–µ–∑ make: make load-test-snapshots
"""
import asyncio
import io
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

from src.config import settings
from src.services.snapshot.minio_service import minio_service


def generate_test_image(
    text: str, 
    width: int = 640, 
    height: int = 480, 
    color: tuple = (100, 150, 200)
) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    
    Args:
        text: –¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        color: –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (RGB)
    
    Returns:
        bytes: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG
    """
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (width, height), color=color)
    draw = ImageDraw.Draw(img)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 40)
    except:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        font = ImageFont.load_default()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    bbox = draw.textbbox((0, 0), text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    
    x = (width - text_width) // 2
    y = (height - text_height) // 2
    
    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    draw.text((x, y), text, fill=(255, 255, 255), font=font)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    timestamp_text = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    draw.text((10, height - 30), timestamp_text, fill=(255, 255, 255))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='JPEG', quality=85)
    img_buffer.seek(0)
    
    return img_buffer.getvalue()


async def load_test_snapshots():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–π –ø—Ä–æ–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    engine = create_async_engine(settings.db_url, echo=False)
    async_session = sessionmaker(
        engine, class_=AsyncSession, expire_on_commit=False
    )
    
    async with async_session() as session:
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–∫—Ç–æ—Ä–∏–Ω–≥–∞
            result = await session.execute(
                text(
                    """
                    SELECT p.id, p.user_id, u.login, s.name as subject_name
                    FROM proctoring p
                    JOIN "user" u ON p.user_id = u.id
                    JOIN subject s ON p.subject_id = s.id
                    LIMIT 3;
                    """
                )
            )
            proctoring_sessions = result.fetchall()
            
            if not proctoring_sessions:
                print("‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–æ–∫—Ç–æ—Ä–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ load_test_data.py")
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(proctoring_sessions)} —Å–µ—Å—Å–∏–π –ø—Ä–æ–∫—Ç–æ—Ä–∏–Ω–≥–∞")
            
            # –¢–∏–ø—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ –∏—Ö —Ü–≤–µ—Ç–∞
            violation_types = [
                ("looking_away", "–û—Ç–≤–æ–¥ –≤–∑–≥–ª—è–¥–∞", (255, 200, 100)),
                ("extra_person", "–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —á–µ–ª–æ–≤–µ–∫", (255, 100, 100)),
                ("mouth_opening", "–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä—Ç–∞", (200, 150, 255)),
                (None, "–ù–æ—Ä–º–∞–ª—å–Ω–æ", (100, 200, 150)),
            ]
            
            total_uploaded = 0
            
            # –î–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            for proctoring_id, user_id, login, subject_name in proctoring_sessions:
                print(f"\nüì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {proctoring_id} ({login} - {subject_name})...")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5-8 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
                num_snapshots = 7
                base_time = datetime.now() - timedelta(hours=2)
                
                for i in range(num_snapshots):
                    # –ß–µ—Ä–µ–¥—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ –∏ —Å–Ω–∏–º–∫–∏ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
                    violation_type, violation_text, color = violation_types[i % len(violation_types)]
                    is_violation = violation_type is not None
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    snapshot_time = base_time + timedelta(minutes=i * 5 + proctoring_id)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_text = f"{login}\n{subject_name}\n{violation_text}"
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    print(f"  üì∑ –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ #{i+1}: {violation_text}...", end=" ")
                    image_data = generate_test_image(image_text, color=color)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è MinIO
                    object_key = minio_service.generate_object_key(
                        user_id=user_id,
                        proctoring_id=proctoring_id,
                        timestamp=snapshot_time,
                        violation_type=violation_type
                    )
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ MinIO
                    try:
                        object_key, file_size = minio_service.upload_snapshot(
                            file_data=image_data,
                            object_key=object_key,
                            content_type="image/jpeg"
                        )
                        print(f"‚úì MinIO", end=" ")
                    except Exception as e:
                        print(f"‚úó –û—à–∏–±–∫–∞ MinIO: {e}")
                        continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                    try:
                        await session.execute(
                            text(
                                """
                                INSERT INTO proctoring_snapshot 
                                (proctoring_id, bucket_name, object_key, file_size, content_type, 
                                 timestamp, uploaded_at, violation_type, violation_severity, 
                                 description, is_violation, metadata_json)
                                VALUES 
                                (:proctoring_id, :bucket_name, :object_key, :file_size, :content_type,
                                 :timestamp, :uploaded_at, :violation_type, :violation_severity,
                                 :description, :is_violation, :metadata_json)
                                """
                            ),
                            {
                                "proctoring_id": proctoring_id,
                                "bucket_name": minio_service.bucket_name,
                                "object_key": object_key,
                                "file_size": file_size,
                                "content_type": "image/jpeg",
                                "timestamp": snapshot_time,
                                "uploaded_at": datetime.now(),
                                "violation_type": violation_type,
                                "violation_severity": "medium" if is_violation else None,
                                "description": f"–¢–µ—Å—Ç–æ–≤—ã–π —Å–Ω–∏–º–æ–∫: {violation_text}",
                                "is_violation": is_violation,
                                "metadata_json": None
                            }
                        )
                        print(f"‚úì –ë–î")
                        total_uploaded += 1
                    except Exception as e:
                        print(f"‚úó –û—à–∏–±–∫–∞ –ë–î: {e}")
                        continue
            
            await session.commit()
            
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_uploaded} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!")
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –°–µ—Å—Å–∏–π –ø—Ä–æ–∫—Ç–æ—Ä–∏–Ω–≥–∞: {len(proctoring_sessions)}")
            print(f"   - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Å–µ—Å—Å–∏—é: ~{num_snapshots}")
            print(f"   - Bucket MinIO: {minio_service.bucket_name}")
            print(f"\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á–µ—Ç:")
            print(f"   curl -H 'Authorization: Bearer TOKEN' http://localhost:8000/api/v1/proctoring/1/report -o report.pdf")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
            await session.rollback()
            raise
        finally:
            await engine.dispose()


async def clear_test_snapshots():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ MinIO –∏ –ë–î"""
    
    engine = create_async_engine(settings.db_url, echo=False)
    async_session = sessionmaker(
        engine, class_=AsyncSession, expire_on_commit=False
    )
    
    async with async_session() as session:
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ snapshot'—ã –∏–∑ –ë–î
            result = await session.execute(
                text("SELECT id, object_key FROM proctoring_snapshot")
            )
            snapshots = result.fetchall()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(snapshots)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            deleted_from_minio = 0
            deleted_from_db = 0
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π snapshot
            for snapshot_id, object_key in snapshots:
                # –£–¥–∞–ª—è–µ–º –∏–∑ MinIO
                try:
                    minio_service.delete_snapshot(object_key)
                    deleted_from_minio += 1
                    print(f"  ‚úì –£–¥–∞–ª–µ–Ω–æ –∏–∑ MinIO: {object_key}")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ MinIO: {object_key} ({e})")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
            await session.execute(text("DELETE FROM proctoring_snapshot"))
            await session.commit()
            deleted_from_db = len(snapshots)
            
            print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"   - –ò–∑ MinIO: {deleted_from_minio}")
            print(f"   - –ò–∑ –ë–î: {deleted_from_db}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
            await session.rollback()
            raise
        finally:
            await engine.dispose()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
    parser.add_argument(
        "--clear",
        action="store_true",
        help="–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏"
    )
    
    args = parser.parse_args()
    
    if args.clear:
        asyncio.run(clear_test_snapshots())
    else:
        asyncio.run(load_test_snapshots())
